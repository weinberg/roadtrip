// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RoadTripPlayerClient is the client API for RoadTripPlayer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoadTripPlayerClient interface {
	GetCharacter(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Character, error)
	NewCharacter(ctx context.Context, in *NewCharacterRequest, opts ...grpc.CallOption) (*Character, error)
	GetCar(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Car, error)
	NewCar(ctx context.Context, in *NewCarRequest, opts ...grpc.CallOption) (*Car, error)
	NameCar(ctx context.Context, in *NameCarRequest, opts ...grpc.CallOption) (*Car, error)
}

type roadTripPlayerClient struct {
	cc grpc.ClientConnInterface
}

func NewRoadTripPlayerClient(cc grpc.ClientConnInterface) RoadTripPlayerClient {
	return &roadTripPlayerClient{cc}
}

func (c *roadTripPlayerClient) GetCharacter(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Character, error) {
	out := new(Character)
	err := c.cc.Invoke(ctx, "/roadtrip.RoadTripPlayer/GetCharacter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roadTripPlayerClient) NewCharacter(ctx context.Context, in *NewCharacterRequest, opts ...grpc.CallOption) (*Character, error) {
	out := new(Character)
	err := c.cc.Invoke(ctx, "/roadtrip.RoadTripPlayer/NewCharacter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roadTripPlayerClient) GetCar(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Car, error) {
	out := new(Car)
	err := c.cc.Invoke(ctx, "/roadtrip.RoadTripPlayer/GetCar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roadTripPlayerClient) NewCar(ctx context.Context, in *NewCarRequest, opts ...grpc.CallOption) (*Car, error) {
	out := new(Car)
	err := c.cc.Invoke(ctx, "/roadtrip.RoadTripPlayer/NewCar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roadTripPlayerClient) NameCar(ctx context.Context, in *NameCarRequest, opts ...grpc.CallOption) (*Car, error) {
	out := new(Car)
	err := c.cc.Invoke(ctx, "/roadtrip.RoadTripPlayer/NameCar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoadTripPlayerServer is the server API for RoadTripPlayer service.
// All implementations must embed UnimplementedRoadTripPlayerServer
// for forward compatibility
type RoadTripPlayerServer interface {
	GetCharacter(context.Context, *Empty) (*Character, error)
	NewCharacter(context.Context, *NewCharacterRequest) (*Character, error)
	GetCar(context.Context, *Empty) (*Car, error)
	NewCar(context.Context, *NewCarRequest) (*Car, error)
	NameCar(context.Context, *NameCarRequest) (*Car, error)
	mustEmbedUnimplementedRoadTripPlayerServer()
}

// UnimplementedRoadTripPlayerServer must be embedded to have forward compatible implementations.
type UnimplementedRoadTripPlayerServer struct {
}

func (UnimplementedRoadTripPlayerServer) GetCharacter(context.Context, *Empty) (*Character, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCharacter not implemented")
}
func (UnimplementedRoadTripPlayerServer) NewCharacter(context.Context, *NewCharacterRequest) (*Character, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewCharacter not implemented")
}
func (UnimplementedRoadTripPlayerServer) GetCar(context.Context, *Empty) (*Car, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCar not implemented")
}
func (UnimplementedRoadTripPlayerServer) NewCar(context.Context, *NewCarRequest) (*Car, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewCar not implemented")
}
func (UnimplementedRoadTripPlayerServer) NameCar(context.Context, *NameCarRequest) (*Car, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NameCar not implemented")
}
func (UnimplementedRoadTripPlayerServer) mustEmbedUnimplementedRoadTripPlayerServer() {}

// UnsafeRoadTripPlayerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoadTripPlayerServer will
// result in compilation errors.
type UnsafeRoadTripPlayerServer interface {
	mustEmbedUnimplementedRoadTripPlayerServer()
}

func RegisterRoadTripPlayerServer(s grpc.ServiceRegistrar, srv RoadTripPlayerServer) {
	s.RegisterService(&RoadTripPlayer_ServiceDesc, srv)
}

func _RoadTripPlayer_GetCharacter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoadTripPlayerServer).GetCharacter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/roadtrip.RoadTripPlayer/GetCharacter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoadTripPlayerServer).GetCharacter(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoadTripPlayer_NewCharacter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewCharacterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoadTripPlayerServer).NewCharacter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/roadtrip.RoadTripPlayer/NewCharacter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoadTripPlayerServer).NewCharacter(ctx, req.(*NewCharacterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoadTripPlayer_GetCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoadTripPlayerServer).GetCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/roadtrip.RoadTripPlayer/GetCar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoadTripPlayerServer).GetCar(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoadTripPlayer_NewCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewCarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoadTripPlayerServer).NewCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/roadtrip.RoadTripPlayer/NewCar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoadTripPlayerServer).NewCar(ctx, req.(*NewCarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoadTripPlayer_NameCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameCarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoadTripPlayerServer).NameCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/roadtrip.RoadTripPlayer/NameCar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoadTripPlayerServer).NameCar(ctx, req.(*NameCarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RoadTripPlayer_ServiceDesc is the grpc.ServiceDesc for RoadTripPlayer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoadTripPlayer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "roadtrip.RoadTripPlayer",
	HandlerType: (*RoadTripPlayerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCharacter",
			Handler:    _RoadTripPlayer_GetCharacter_Handler,
		},
		{
			MethodName: "NewCharacter",
			Handler:    _RoadTripPlayer_NewCharacter_Handler,
		},
		{
			MethodName: "GetCar",
			Handler:    _RoadTripPlayer_GetCar_Handler,
		},
		{
			MethodName: "NewCar",
			Handler:    _RoadTripPlayer_NewCar_Handler,
		},
		{
			MethodName: "NameCar",
			Handler:    _RoadTripPlayer_NameCar_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/grpc/player.proto",
}
